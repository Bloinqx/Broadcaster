# ======================== #
#
#   Broadcaster v1.2.1 by Blinqx
#
# ======================== #

options:
	
# === Main Options ===

	# Main broadcaster command (also used as admin command prefix)
	broadcasterMainCmd: broadcaster
	broadcasterAliases: automsg, broadcaster, bcaster, tips, tip
	
	# No Permission Message
	permDenied: &8• &7You lack permission for that
	# Permission Node Prefix
	permPrefix: skript # permission node will begin in "skript," ex: "skript.broadcaster"
	
	# Color Theme
	aColor: &7 # Main text color
	bColor: &b # Emphasis text color
	cColor: &3 # Extra emphasis color numbers in broadcast list
	
	# Command players will use to disable themselves from seeing the broadcasts
	broadcasterPersonalToggle: btoggle
	broadcasterPersonalAliases: togglebroadcasts, toggletips, ttoggle, brtoggle
	# Permission to use personal toggle command
	broadcasterPersonalTogglePerm: broadcaster.toggle
	
	# Set of characters that indicates a new line in a broadcast
	newLineIndicator: ||
	
on load:
	set {-broadcaster::name} to "{@broadcasterMainCmd}"
	set {-broadcaster::name} to proper case {-broadcaster::name}


# === Actual Skript ===

command /{@broadcasterMainCmd} [<text>] [<text>] [<integer>]:
	aliases: {@broadcasterAliases}
	permission: {@permPrefix}.broadcaster
	permission message: {@permDenied}
	trigger:
		if arg-1 is not set:
			send ""
			send "&8[{@bColor}%{-broadcaster::name}%&8] {@bColor}/{@broadcasterMainCmd} new/add <message> {@aColor}- Add a new broadcast"
			send "&8[{@bColor}%{-broadcaster::name}%&8] {@bColor}/{@broadcasterMainCmd} del/remove <number> {@aColor}- Remove the specified broadcast"
			send "&8[{@bColor}%{-broadcaster::name}%&8] {@bColor}/{@broadcasterMainCmd} list {@aColor}- List all broadcasts"
			send "&8[{@bColor}%{-broadcaster::name}%&8] {@bColor}/{@broadcasterMainCmd} delay <minutes> {@aColor}- Set broadcast delay"
			send "&8[{@bColor}%{-broadcaster::name}%&8] {@bColor}/{@broadcasterMainCmd} toggle {@aColor}- Toggles broadcasts on/off"
			send "&8[{@bColor}%{-broadcaster::name}%&8] {@bColor}/{@broadcasterMainCmd} swap <number> <number> {@aColor}- Swap location of two broadcasts"
			send "&8[{@bColor}%{-broadcaster::name}%&8] {@bColor}/{@broadcasterMainCmd} order <numerical/random> {@aColor}- Set broadcast order"
			send "&8[{@bColor}%{-broadcaster::name}%&8] {@bColor}/{@broadcasterPersonalToggle} {@aColor}- Toggle personal broadcast visibility"
			send ""
			send "&8[{@bColor}%{-broadcaster::name}%&8] {@bColor}v1.2.1 {@cColor}by {@bColor}Blinqx"
			send ""
		else:
			if arg-1 is "new" or "add":
				if arg-2 is set:
					send "&8[{@bColor}%{-broadcaster::name}%&8] {@aColor}Added ""&f%colored arg-2%{@aColor}"" to broadcasts"
					add arg-2 to {broadcaster::messages::*}
				else:
					send formatted "&8[{@bColor}%{-broadcaster::name}%&8] {@aColor}Usage: /{@broadcasterMainCmd} new/add <message>"
			
			else if arg-1 is "list":
				send "&8[{@bColor}%{-broadcaster::name}%&8] {@aColor}All Broadcasts:"
				loop {broadcaster::messages::*}:
					set {_message::*} to loop-value split at "{@newLineIndicator}"
					if size of {_message::*} > 1:
						send formatted "&8• {@cColor}##%loop-index-1% {@aColor}- &r%{_message::1}%"
						delete {_message::1}
						loop {_message::*}:
							send formatted "       {@aColor} &r%loop-value-2%"
					else:
						send formatted "&8• {@cColor}##%loop-index% {@aColor}- &r%colored loop-value%"

			else if arg-1 is "del" or "remove":
				if arg-2 is set:
					if arg-2 parsed as an integer <= size of {broadcaster::messages::*}:
						send formatted "&8[{@bColor}%{-broadcaster::name}%&8] {@aColor}Removed ""&f%{broadcaster::messages::%arg-2%}%{@aColor}"" from broadcasts"
						set {_index} to arg-2 parsed as an integer
						while {_index} < size of {broadcaster::messages::*}:
							set {broadcaster::messages::%{_index}%} to {broadcaster::messages::%{_index}+1%}
							add 1 to {_index}
						delete {broadcaster::messages::%size of {broadcaster::messages::*}%}
					else:
						send "&8[{@bColor}%{-broadcaster::name}%&8] {@aColor}There are only {@bColor}%size of {broadcaster::messages::*}% {@aColor}broadcasts"
				else:
					send "&8[{@bColor}%{-broadcaster::name}%&8] {@aColor}Usage: /{@broadcasterMainCmd} del/remove <number>"
					
			else if arg-1 is "delay":
				if arg-2 is set:
					send "&8[{@bColor}%{-broadcaster::name}%&8] {@aColor}Set delay to {@bColor}%arg-2% minute(s)"
					set {broadcaster::delay} to arg-2
				else:
					send "&8[{@bColor}%{-broadcaster::name}%&8] {@aColor}Usage: /{@broadcasterMainCmd} delay <minutes>"
					
			else if arg-1 is "toggle":
				if {broadcaster::disabled} is not set:
					set {broadcaster::disabled} to true
					send "&8[{@bColor}%{-broadcaster::name}%&8] {@aColor}Broadcasts &cDisabled"
				else:
					delete {broadcaster::disabled}
					send "&8[{@bColor}%{-broadcaster::name}%&8] {@aColor}Broadcasts {@bColor}Enabled"
					
			else if arg-1 is "swap":
				if arg-2 is set:
					if arg-2 parsed as an integer <= size of {broadcaster::messages::*}:
						if arg-3 is set:
							if arg-3 <= size of {broadcaster::messages::*}:
								if arg-3 isn't arg-2 parsed as an integer:
									send formatted "<tooltip:{@bColor}[##%arg-2%] {@cColor}""&r%{broadcaster::messages::%arg-2 parsed as an integer%}%{@cColor}"" {@cColor}⇆ {@bColor}[##%arg-3%] {@cColor}""&r%{broadcaster::messages::%arg-3%}%{@cColor}"">&8[{@bColor}%{-broadcaster::name}%&8] {@aColor}Successfully Swapped {@bColor}[Hover]"
									set {_temp} to {broadcaster::messages::%arg-2 parsed as an integer%}
									set {broadcaster::messages::%arg-2 parsed as an integer%} to {broadcaster::messages::%arg-3%}
									set {broadcaster::messages::%arg-3%} to {_temp}
								else:
									send "&8[{@bColor}%{-broadcaster::name}%&8] {@aColor}Error: List positions match"
							else:
								send "&8[{@bColor}%{-broadcaster::name}%&8] {@aColor}Error: Second bound too large"
						else:
							send "&8[{@bColor}%{-broadcaster::name}%&8] {@aColor}Usage: /{@broadcasterMainCmd} swap <integer> <integer>"
					else:
						send "&8[{@bColor}%{-broadcaster::name}%&8] {@aColor}Error: First bound too large"
				else:
					send "&8[{@bColor}%{-broadcaster::name}%&8] {@aColor}Usage: /{@broadcasterMainCmd} swap <integer> <integer>"
					
			else if arg-1 is "order":
				if arg-2 is "numerical":
					set {broadcaster::order} to "numerical"
					send "&8[{@bColor}%{-broadcaster::name}%&8] {@aColor}Changed broadcast order to {@bColor}%proper case arg-2%"
				else if arg-2 is "random":
					set {broadcaster::order} to "random"
					send "&8[{@bColor}%{-broadcaster::name}%&8] {@aColor}Changed broadcast order to {@bColor}%proper case arg-2%"
				else:
					send "&8[{@bColor}%{-broadcaster::name}%&8] {@aColor}Usage: /{@broadcasterMainCmd} order <numerical/random>"
					
command /{@broadcasterPersonalToggle}:
	aliases: {@broadcasterPersonalAliases}
	permission: {@permPrefix}.{@broadcasterPersonalTogglePerm}
	permission message: {@permDenied}
	trigger:
		if {broadcaster::toggle::%player%} is not set:
			set {broadcaster::toggle::%player%} to false
			send "&8[{@bColor}%{-broadcaster::name}%&8] {@aColor}You will no longer see auto broadcasts"
		else:
			delete {broadcaster::toggle::%player%}
			send "&8[{@bColor}%{-broadcaster::name}%&8] {@aColor}You will now see auto broadcasts"
			
every 60 seconds:
	if {broadcaster::disabled} is not set:
		add 1 to {-broadcaster::minute}
		if {-broadcaster::minute} >= {broadcaster::delay} parsed as number:
			if {broadcaster::messages::1} is set:
				if {broadcaster::order} is "numerical":
					add 1 to {-broadcaster::message}
					if {-broadcaster::message} > size of {broadcaster::messages::*}:
						set {-broadcaster::message} to 1
				else:
					set {_temp} to {-broadcaster::message}
					while {_temp} = {-broadcaster::message}:
						set {-broadcaster::message} to random integer between 1 and size of {broadcaster::messages::*}
				set {_message::*} to {broadcaster::messages::%{-broadcaster::message}%} split at "{@newLineIndicator}"
				loop all players:
					if {broadcaster::toggle::%loop-player%} is not set:
						if size of {_message::*} > 1:
							loop {_message::*}:
								send formatted loop-value-2 to loop-player
						else:
							send formatted {broadcaster::messages::%{-broadcaster::message}%} to loop-player
				set {-broadcaster::minute} to 0
